window.SIDEBAR_ITEMS = {"attr":[["comp","Derives a `comp::Simple` or `comp::Isotope` implementation for the applied type. This macro does not modify the input other than stripping attributes."],["global","Derives a `Global` implementation for the applied type. This macro does not modify the input other than stripping attributes."],["system","Converts a function into a system."]],"derive":[["Discrim","Derives a `Discrim` implementation for the type."],["EntityRef","Derives a `Referrer` implementation for the type."]],"macro":[["accessors","Declares a composite struct that implements `Accessor` and `Chunked` by delegation to all fields and reconstructing the same struct with different types."],["archetype","Declares archetypes."],["assert_partition","Asserts that a type can be used as a partition."],["comps","Creates a map of components for a given archetype."],["system_test","Convenience macro that constructs a new world for testing a small number of systems."]],"mod":[["archetype","An archetype is a kind of entity with a fixed set of (optional) components."],["comp","A component is a small data structure that can be attached to an entity."],["entity","An entity is a single object that owns components."],["global",""],["macros",""],["system","Systems are actions performed every frame to manipulate entities and components."],["util","Miscellaneous types used in the API."],["world","The world stores the states of the game."]],"trait":[["Global","A global state that can be requested by all systems."]]};