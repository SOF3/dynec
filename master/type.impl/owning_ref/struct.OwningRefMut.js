(function() {var type_impls = {
"owning_ref":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#544-791\">source</a><a href=\"#impl-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#558-566\">source</a><h4 class=\"code-header\">pub fn <a href=\"owning_ref/struct.OwningRefMut.html#tymethod.new\" class=\"fn\">new</a>(o: O) -&gt; Self<div class=\"where\">where\n    O: <a class=\"trait\" href=\"owning_ref/trait.StableAddress.html\" title=\"trait owning_ref::StableAddress\">StableAddress</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>&lt;Target = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new owning reference from a owner\ninitialized to the direct dereference of it.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">extern crate </span>owning_ref;\n<span class=\"kw\">use </span>owning_ref::OwningRefMut;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>owning_ref_mut = OwningRefMut::new(Box::new(<span class=\"number\">42</span>));\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>owning_ref_mut, <span class=\"number\">42</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_assert_stable_address\" class=\"method\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#573-580\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"owning_ref/struct.OwningRefMut.html#tymethod.new_assert_stable_address\" class=\"fn\">new_assert_stable_address</a>(o: O) -&gt; Self<div class=\"where\">where\n    O: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>&lt;Target = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Like <code>new</code>, but doesn’t require <code>O</code> to implement the <code>StableAddress</code> trait.\nInstead, the caller is responsible to make the same promises as implementing the trait.</p>\n<p>This is useful for cases where coherence rules prevents implementing the trait\nwithout adding a dependency to this crate in a third-party library.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#602-610\">source</a><h4 class=\"code-header\">pub fn <a href=\"owning_ref/struct.OwningRefMut.html#tymethod.map\" class=\"fn\">map</a>&lt;F, U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"owning_ref/struct.OwningRef.html\" title=\"struct owning_ref::OwningRef\">OwningRef</a>&lt;O, U&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"owning_ref/trait.StableAddress.html\" title=\"trait owning_ref::StableAddress\">StableAddress</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;U</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> into a new <em>shared</em> owning reference that points at\nsomething reachable from the previous one.</p>\n<p>This can be a reference to a field of <code>U</code>, something reachable from a field of\n<code>U</code>, or even something unrelated with a <code>'static</code> lifetime.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">extern crate </span>owning_ref;\n<span class=\"kw\">use </span>owning_ref::OwningRefMut;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>owning_ref_mut = OwningRefMut::new(Box::new([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]));\n\n    <span class=\"comment\">// create a owning reference that points at the\n    // third element of the array.\n    </span><span class=\"kw\">let </span>owning_ref = owning_ref_mut.map(|array| <span class=\"kw-2\">&amp;</span>array[<span class=\"number\">2</span>]);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>owning_ref, <span class=\"number\">3</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#632-640\">source</a><h4 class=\"code-header\">pub fn <a href=\"owning_ref/struct.OwningRefMut.html#tymethod.map_mut\" class=\"fn\">map_mut</a>&lt;F, U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, U&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"owning_ref/trait.StableAddress.html\" title=\"trait owning_ref::StableAddress\">StableAddress</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut U</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> into a new <em>mutable</em> owning reference that points at\nsomething reachable from the previous one.</p>\n<p>This can be a reference to a field of <code>U</code>, something reachable from a field of\n<code>U</code>, or even something unrelated with a <code>'static</code> lifetime.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">extern crate </span>owning_ref;\n<span class=\"kw\">use </span>owning_ref::OwningRefMut;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>owning_ref_mut = OwningRefMut::new(Box::new([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]));\n\n    <span class=\"comment\">// create a owning reference that points at the\n    // third element of the array.\n    </span><span class=\"kw\">let </span>owning_ref_mut = owning_ref_mut.map_mut(|array| <span class=\"kw-2\">&amp;mut </span>array[<span class=\"number\">2</span>]);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>owning_ref_mut, <span class=\"number\">3</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_map\" class=\"method\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#664-672\">source</a><h4 class=\"code-header\">pub fn <a href=\"owning_ref/struct.OwningRefMut.html#tymethod.try_map\" class=\"fn\">try_map</a>&lt;F, U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, E&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"owning_ref/struct.OwningRef.html\" title=\"struct owning_ref::OwningRef\">OwningRef</a>&lt;O, U&gt;, E&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"owning_ref/trait.StableAddress.html\" title=\"trait owning_ref::StableAddress\">StableAddress</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;U</a>, E&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Tries to convert <code>self</code> into a new <em>shared</em> owning reference that points\nat something reachable from the previous one.</p>\n<p>This can be a reference to a field of <code>U</code>, something reachable from a field of\n<code>U</code>, or even something unrelated with a <code>'static</code> lifetime.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">extern crate </span>owning_ref;\n<span class=\"kw\">use </span>owning_ref::OwningRefMut;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>owning_ref_mut = OwningRefMut::new(Box::new([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]));\n\n    <span class=\"comment\">// create a owning reference that points at the\n    // third element of the array.\n    </span><span class=\"kw\">let </span>owning_ref = owning_ref_mut.try_map(|array| {\n        <span class=\"kw\">if </span>array[<span class=\"number\">2</span>] == <span class=\"number\">3 </span>{ <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;</span>array[<span class=\"number\">2</span>]) } <span class=\"kw\">else </span>{ <span class=\"prelude-val\">Err</span>(()) }\n    });\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>owning_ref.unwrap(), <span class=\"number\">3</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_map_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#696-704\">source</a><h4 class=\"code-header\">pub fn <a href=\"owning_ref/struct.OwningRefMut.html#tymethod.try_map_mut\" class=\"fn\">try_map_mut</a>&lt;F, U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, E&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, U&gt;, E&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"owning_ref/trait.StableAddress.html\" title=\"trait owning_ref::StableAddress\">StableAddress</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut U</a>, E&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Tries to convert <code>self</code> into a new <em>mutable</em> owning reference that points\nat something reachable from the previous one.</p>\n<p>This can be a reference to a field of <code>U</code>, something reachable from a field of\n<code>U</code>, or even something unrelated with a <code>'static</code> lifetime.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">extern crate </span>owning_ref;\n<span class=\"kw\">use </span>owning_ref::OwningRefMut;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>owning_ref_mut = OwningRefMut::new(Box::new([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]));\n\n    <span class=\"comment\">// create a owning reference that points at the\n    // third element of the array.\n    </span><span class=\"kw\">let </span>owning_ref_mut = owning_ref_mut.try_map_mut(|array| {\n        <span class=\"kw\">if </span>array[<span class=\"number\">2</span>] == <span class=\"number\">3 </span>{ <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut </span>array[<span class=\"number\">2</span>]) } <span class=\"kw\">else </span>{ <span class=\"prelude-val\">Err</span>(()) }\n    });\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>owning_ref_mut.unwrap(), <span class=\"number\">3</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_owner\" class=\"method\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#711-720\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"owning_ref/struct.OwningRefMut.html#tymethod.map_owner\" class=\"fn\">map_owner</a>&lt;F, P&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;P, T&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"owning_ref/trait.StableAddress.html\" title=\"trait owning_ref::StableAddress\">StableAddress</a>,\n    P: <a class=\"trait\" href=\"owning_ref/trait.StableAddress.html\" title=\"trait owning_ref::StableAddress\">StableAddress</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(O) -&gt; P,</div></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> into a new owning reference with a different owner type.</p>\n<p>The new owner type needs to still contain the original owner in some way\nso that the reference into it remains valid. This function is marked unsafe\nbecause the user needs to manually uphold this guarantee.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_owner_box\" class=\"method\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#727-732\">source</a><h4 class=\"code-header\">pub fn <a href=\"owning_ref/struct.OwningRefMut.html#tymethod.map_owner_box\" class=\"fn\">map_owner_box</a>(self) -&gt; <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;O&gt;, T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> into a new owning reference where the owner is wrapped\nin an additional <code>Box&lt;O&gt;</code>.</p>\n<p>This can be used to safely erase the owner of any <code>OwningRefMut&lt;O, T&gt;</code>\nto a <code>OwningRefMut&lt;Box&lt;dyn Erased&gt;, T&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.erase_owner\" class=\"method\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#766-773\">source</a><h4 class=\"code-header\">pub fn <a href=\"owning_ref/struct.OwningRefMut.html#tymethod.erase_owner\" class=\"fn\">erase_owner</a>&lt;'a&gt;(self) -&gt; <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O::<a class=\"associatedtype\" href=\"owning_ref/trait.IntoErased.html#associatedtype.Erased\" title=\"type owning_ref::IntoErased::Erased\">Erased</a>, T&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"owning_ref/trait.IntoErased.html\" title=\"trait owning_ref::IntoErased\">IntoErased</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Erases the concrete base type of the owner with a trait object.</p>\n<p>This allows mixing of owned references with different owner base types.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">extern crate </span>owning_ref;\n<span class=\"kw\">use </span>owning_ref::{OwningRefMut, Erased};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"comment\">// NB: Using the concrete types here for explicitnes.\n    // For less verbose code type aliases like `BoxRef` are provided.\n\n    </span><span class=\"kw\">let </span>owning_ref_mut_a: OwningRefMut&lt;Box&lt;[i32; <span class=\"number\">4</span>]&gt;, [i32; <span class=\"number\">4</span>]&gt;\n        = OwningRefMut::new(Box::new([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]));\n\n    <span class=\"kw\">let </span>owning_ref_mut_b: OwningRefMut&lt;Box&lt;Vec&lt;(i32, bool)&gt;&gt;, Vec&lt;(i32, bool)&gt;&gt;\n        = OwningRefMut::new(Box::new(<span class=\"macro\">vec!</span>[(<span class=\"number\">0</span>, <span class=\"bool-val\">false</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">true</span>)]));\n\n    <span class=\"kw\">let </span>owning_ref_mut_a: OwningRefMut&lt;Box&lt;[i32; <span class=\"number\">4</span>]&gt;, i32&gt;\n        = owning_ref_mut_a.map_mut(|a| <span class=\"kw-2\">&amp;mut </span>a[<span class=\"number\">0</span>]);\n\n    <span class=\"kw\">let </span>owning_ref_mut_b: OwningRefMut&lt;Box&lt;Vec&lt;(i32, bool)&gt;&gt;, i32&gt;\n        = owning_ref_mut_b.map_mut(|a| <span class=\"kw-2\">&amp;mut </span>a[<span class=\"number\">1</span>].<span class=\"number\">0</span>);\n\n    <span class=\"kw\">let </span>owning_refs_mut: [OwningRefMut&lt;Box&lt;<span class=\"kw\">dyn </span>Erased&gt;, i32&gt;; <span class=\"number\">2</span>]\n        = [owning_ref_mut_a.erase_owner(), owning_ref_mut_b.erase_owner()];\n\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>owning_refs_mut[<span class=\"number\">0</span>], <span class=\"number\">1</span>);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>owning_refs_mut[<span class=\"number\">1</span>], <span class=\"number\">1</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_owner\" class=\"method\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#778-780\">source</a><h4 class=\"code-header\">pub fn <a href=\"owning_ref/struct.OwningRefMut.html#tymethod.as_owner\" class=\"fn\">as_owner</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;O</a></h4></section></summary><div class=\"docblock\"><p>A reference to the underlying owner.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_owner_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#783-785\">source</a><h4 class=\"code-header\">pub fn <a href=\"owning_ref/struct.OwningRefMut.html#tymethod.as_owner_mut\" class=\"fn\">as_owner_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut O</a></h4></section></summary><div class=\"docblock\"><p>A mutable reference to the underlying owner.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_owner\" class=\"method\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#788-790\">source</a><h4 class=\"code-header\">pub fn <a href=\"owning_ref/struct.OwningRefMut.html#tymethod.into_owner\" class=\"fn\">into_owner</a>(self) -&gt; O</h4></section></summary><div class=\"docblock\"><p>Discards the reference and retrieves the owner.</p>\n</div></details></div></details>",0,"owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#957-965\">source</a><a href=\"#impl-Deref-for-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#960-964\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1115-1119\">source</a><a href=\"#impl-PartialEq-for-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1116-1118\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"],["<section id=\"impl-StableDeref-for-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#977\">source</a><a href=\"#impl-StableDeref-for-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"owning_ref/trait.StableAddress.html\" title=\"trait owning_ref::StableAddress\">StableDeref</a> for <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;</h3></section>","StableDeref","owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CT%3E-for-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#985-989\">source</a><a href=\"#impl-AsRef%3CT%3E-for-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;T&gt; for <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#986-988\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<T>","owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"],["<section id=\"impl-Eq-for-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1121\">source</a><a href=\"#impl-Eq-for-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Eq","owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CT%3E-for-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#991-995\">source</a><a href=\"#impl-AsMut%3CT%3E-for-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;T&gt; for <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#992-994\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<T>","owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1123-1127\">source</a><a href=\"#impl-PartialOrd-for-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1124-1126\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1135-1139\">source</a><a href=\"#impl-Hash-for-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1136-1138\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1047-1057\">source</a><a href=\"#impl-Debug-for-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1051-1056\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#967-973\">source</a><a href=\"#impl-DerefMut-for-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#968-972\">source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"],["<section id=\"impl-Sync-for-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1080-1081\">source</a><a href=\"#impl-Sync-for-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    for&lt;'a&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a mut T</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h3></section>","Sync","owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1129-1133\">source</a><a href=\"#impl-Ord-for-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1130-1132\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"],["<section id=\"impl-Send-for-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1078-1079\">source</a><a href=\"#impl-Send-for-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    for&lt;'a&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a mut T</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section>","Send","owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CO%3E-for-OwningRefMut%3CO,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1012-1019\">source</a><a href=\"#impl-From%3CO%3E-for-OwningRefMut%3CO,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O, T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;O&gt; for <a class=\"struct\" href=\"owning_ref/struct.OwningRefMut.html\" title=\"struct owning_ref::OwningRefMut\">OwningRefMut</a>&lt;O, T&gt;<div class=\"where\">where\n    O: <a class=\"trait\" href=\"owning_ref/trait.StableAddress.html\" title=\"trait owning_ref::StableAddress\">StableAddress</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a>&lt;Target = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/owning_ref/lib.rs.html#1016-1018\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(owner: O) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<O>","owning_ref::BoxRefMut","owning_ref::VecRefMut","owning_ref::StringRefMut","owning_ref::RefMutRefMut","owning_ref::MutexGuardRefMut","owning_ref::RwLockWriteGuardRefMut","owning_ref::ErasedBoxRefMut"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()